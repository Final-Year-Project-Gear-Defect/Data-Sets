# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_qVyHmTAku4DA56gTzH-Qn3xza40Wb4i
"""

!pip install inference-sdk

pip install requests

from inference_sdk import InferenceHTTPClient

# Initialize the client
CLIENT = InferenceHTTPClient(
    api_url="https://detect.roboflow.com",  # Use detect.roboflow.com
    api_key="AEds2Afj8HvtEGEj0nKA"  # 🔑 replace with your Roboflow API key
)

from google.colab import files
uploaded = files.upload()

# This will let you select an image from your computer
# The uploaded file will be saved in Colab's current directory

!pip install inference-sdk

from inference_sdk import InferenceHTTPClient

# Initialize client
CLIENT = InferenceHTTPClient(
    api_url="https://detect.roboflow.com",
    api_key="AEds2Afj8HvtEGEj0nKA"   # replace with your Roboflow key
)

# Upload an image
from google.colab import files
uploaded = files.upload()
image_path = list(uploaded.keys())[0]  # get uploaded filename

# Run inference
result = CLIENT.infer(image_path, model_id="gear-fault-dms0r/1")  # check model_id in Roboflow Deploy tab
print(result)

# Step 1: Install the SDK
!pip install inference-sdk

# Step 2: Import libraries
from inference_sdk import InferenceHTTPClient
import cv2
import matplotlib.pyplot as plt
from google.colab import files

# Step 3: Initialize the Roboflow client
CLIENT = InferenceHTTPClient(
    api_url="https://detect.roboflow.com",
    api_key="AEds2Afj8HvtEGEj0nKA"   # 🔑 Replace with your real API key
)

# Step 4: Upload images
uploaded = files.upload()
image_files = list(uploaded.keys())

# Step 5: Process each uploaded image
for image_path in image_files:
    print(f"\n🔍 Running inference on: {image_path}")

    # Run inference
    result = CLIENT.infer(image_path, model_id="gear-fault-dms0r/1")  # ⚠️ check model_id in Deploy tab
    print("Raw result:", result)

    # Load image
    image = cv2.imread(image_path)

    # Counters for defect vs non-defect
    defect_count, total_count = 0, 0

    # Draw predictions
    for pred in result['predictions']:
        x, y, w, h = pred['x'], pred['y'], pred['width'], pred['height']
        class_name = pred['class']
        conf = pred['confidence']

        # Convert center coords to top-left and bottom-right
        x1, y1 = int(x - w/2), int(y - h/2)
        x2, y2 = int(x + w/2), int(y + h/2)

        # Color code: defect = red, non-defect = green
        color = (0,255,0) if class_name.lower() == "non-defect" else (255,0,0)

        # Draw bounding box
        cv2.rectangle(image, (x1, y1), (x2, y2), color, 2)
        cv2.putText(image, f"{class_name} {conf:.2f}", (x1, y1-10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

        # Count defects
        total_count += 1
        if class_name.lower() == "defect":
            defect_count += 1

    # Show annotated image
    plt.figure(figsize=(8,8))
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.axis("off")
    plt.title(f"Results for {image_path}")
    plt.show()

    # Calculate and print defect percentage
    if total_count > 0:
        defect_percentage = (defect_count / total_count) * 100
        print(f"⚙️ Defects: {defect_count}/{total_count} ({defect_percentage:.2f}%)")
    else:
        print("⚠️ No objects detected.")